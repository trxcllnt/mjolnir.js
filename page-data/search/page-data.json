{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"Upgrade Guide From 1.x to 2.0 The  legacyBlockScroll  option to  EventManager  is removed. Use  eventManager.on('wheel', evt => evt.preventDefault())  to block scrolling. The  rightButton  option to  EventManager  is removed. Use  eventManager.on('contextmenu', evt => evt.preventDefault())  to enable right-button clicking and dragging.","headings":[{"value":"Upgrade Guide","depth":1},{"value":"From 1.x to 2.0","depth":2}],"slug":"docs/upgrade-guide","title":"Upgrade Guide"},{"excerpt":"Overview mjolnir.js is a JavaScript event and gesture handling module. It is built on top of and named  in homage  of the classic  hammer.js  library. Features On top of the pointer gestures that Hammer.js offers, mjolnir.js adds support for the following events: Right mouse button Gestures Generic mouse events such as  pointermove ,  pointerover ,  pointerout , and  pointerleave  without requiring button down Mouse wheel events Keyboard events Event propagation without firing  DOM events . Platforms supported The primary focus is to support so called evergreen browsers as well as mobile browsers, but PRs for older browser will generally be accepted.","headings":[{"value":"Overview","depth":1},{"value":"Features","depth":2},{"value":"Platforms supported","depth":2}],"slug":"docs","title":"Overview"},{"excerpt":"What's New v1.0 Initial version","headings":[{"value":"What's New","depth":1},{"value":"v1.0 Initial version","depth":2}],"slug":"docs/whats-new","title":"What's New"},{"excerpt":"Event Event handlers subscribed via  EventManager.on()  will be called with one parameter. This event parameter always has the following properties: type  (string) - The event type to which the event handler is subscribed, e.g.  'click'  or  'pointermove' center  (Object  {x, y} ) - The center of the event location (e.g. the centroid of a touch) relative to the viewport (basically,  clientX/Y ) offsetCenter  (Object  {x, y} ) - The center of the event location (e.g. the centroid of a touch) target  (Object) - The target of the event, as specified by the original  srcEvent srcEvent  (Object) - The original event object dispatched by the browser to the JS runtime preventDefault  (Function) - Equivalent to  srcEvent.preventDefault . stopPropagation  (Function) - Do not invoke handlers registered for any ancestors in the DOM tree. stopImmediatePropagation  (Function) - Do not invoke any other handlers registered for the same element or its ancestors. Additionally, event objects for different event types contain a subset of the following properties: key  (number) - The keycode of the keyboard event leftButton  (boolean) - Flag indicating whether the left button is involved during the event middleButton  (boolean) - Flag indicating whether the middle button is involved during the event rightButton  (boolean) - Flag indicating whether the right button is involved during the event pointerType  (string) - A string indicating the type of input (e.g.  'mouse' ,  'touch' ,  'pointer' ) delta  (number) - The scroll magnitude/distance of a wheel event","headings":[{"value":"Event","depth":1}],"slug":"docs/api-reference/event","title":"Event"},{"excerpt":"Get Started Installation Usage Using with React The  EventManager  can be initialized with an empty root: We may set the root element later to a DOM node that's rendered by React: Or add/remove event listeners when a React component is rendered: Note that React's event chain is independent from that of mjolnir.js'. Therefore, a  click  event handler registered with mjolnir.js cannot be blocked by calling  stopPropagation  on a React  onClick  event.","headings":[{"value":"Get Started","depth":1},{"value":"Installation","depth":2},{"value":"Usage","depth":1},{"value":"Using with React","depth":2}],"slug":"docs/get-started","title":"Get Started"},{"excerpt":"EventManager Provides a unified API for subscribing to events about both basic input events (e.g. 'mousemove', 'touchstart', 'wheel') and gestural input (e.g. 'click', 'tap', 'panstart'). Usage Note:  While EventManager supports mouse and touch events, we recommend the use of  Pointer Events  when possible for the broadest input device compatibility. Methods constructor Creates a new  EventManager  instance. new EventManager(element, {events, recognizers}) element  {DOM Element, optional} - DOM element on which event handlers will be registered. Default  null . options  {Object, optional} - Options events  {Object} - A map from event names to their handler functions, to register on init. recognizers  - {Object} Gesture recognizers from Hammer.js to register, as an Array in  Hammer.Recognizer format . If not provided, a default set of recognizers will be used. See \"Gesture Events\" section below for more details. recognizerOptions  - {Object} Override the default options of  recognizers . Keys are recognizer names and values are recognizer options. For a list of default recognizers, see \"Gesture Events\" section below. rightButton  - {Boolean} Recognizes click and drag from pressing the right mouse button. Default  false . If turned on, the context menu will be disabled. touchAction  - {String} Allow browser default touch actions. Default  none . See  hammer.js doc . tabIndex  - {Number} The  tabindex  of the root element. Default  0 . destroy Tears down internal event management implementations. eventManager.destroy() Note: It is important to call  destroy  when done since  EventManager  adds event listeners to  window . setElement Set the DOM element on which event handlers will be registered. If element has been set, events will be unregistered from the previous element. eventManager.setElement(element) element  {DOM Element, optional} - DOM element on which event handlers will be registered. on Register an event handler function to be called on  event . event  {String} - An event name handler  {Function} - The function to be called on  event . eventMap  {Object} - A map from event names to their handler functions options  {Object, optional} srcElement  {Node} - The source element of this event. If provided, only events that are targeting this element or its decendants will invoke the handler. If ignored, default to the root element of the event manager. Events are propagated up the DOM tree. priority  {Number} - Handlers targeting the same  srcElement  will be executed by their priorities (higher numbers first). Handlers with the same priority will be executed in the order of registration. Default  0 .  Note: Unlike the DOM event system, developers are responsible of deregistering event handlers when  srcElement  is removed.  once Register a one-time event handler function to be called on  event . The handler is removed once it has been called. Expects the same arguments as  on . watch Register an event handler function to be called on  event . This handler does not ask the event to be recognized from user input; rather, it \"intercepts\" the event if some other handler is getting it. Expects the same arguments as  on . For example, we want a child element to block any  dblclick  event from bubbling up to root. The root may or may not be actually listening to  dblclick . If the root did not register a handler, and we use It will enable the  DoubleTapRecognizer . Recognizers for gestures add additional overhead, and may cause subtle behavioral changes. In this case, recognizing  dblclick  events will cause the  click  events to be fired with a small delay. Since we only want to be notified  if  a  dblclick  event is fired, it is safer to use: off Deregister a previously-registered event handler. eventManager.off(event, handler) \n eventManager.off(eventMap) event  {String} - An event name handler  {Function} - The function to be called on  event . eventMap  {Object} - A map from event names to their handler functions Supported Events and Gestures Basic input events Keyboard events are fired when focus is on the EventManager's target element or its decendants, unless typing into a text input. 'keydown' 'keyup' Mouse event and pointer event names are interchangeable. 'mousedown'  |  'pointerdown' 'mousemove'  |  'pointermove' 'mouseup'  |  'pointerup' 'mouseover'  |  'pointerover' 'mouseout'  |  'pointerout' 'mouseleave'  |  'pointerleave' 'wheel' 'contextmenu' Gesture events The following events are generated with  hammer.js recognizers. You may fine-tune the behavior of these events by supplying  recognizerOptions  to the  EventManager  constructor. The following events are controlled by the  rotate  ( Hammer.Rotate ) recognizer: 'rotate' 'rotatestart' 'rotatemove' 'rotateend' 'rotatecancel' The following events are controlled by the  pinch  ( Hammer.Pinch ) recognizer: 'pinch' 'pinchin' 'pinchout' 'pinchstart' 'pinchmove' 'pinchend' 'pinchcancel' The following events are controlled by the  swipe  ( Hammer.Swipe ) recognizer: 'swipe' 'swipeleft' 'swiperight' 'swipeup' 'swipedown' The following events are controlled by the  tripan  ( Hammer.Pan ) recognizer (3-finger pan): 'tripan' 'tripanstart' 'tripanmove' 'tripanup' 'tripandown' 'tripanleft' 'tripanright' 'tripanend' 'tripancancel' The following events are controlled by the  pan  ( Hammer.Pan ) recognizer: 'pan' 'panstart' 'panmove' 'panup' 'pandown' 'panleft' 'panright' 'panend' 'pancancel' The following events are controlled by the  Press  ( Hammer.Pan ) recognizer: 'press' The following events are controlled by the  doubletap  ( Hammer.Pan ) recognizer: 'doubletap' 'dblclick'  - alias of  doubletap The following events are controlled by the  tap  ( Hammer.Pan ) recognizer: 'tap'  - a single click. Not fired if double clicking. 'click'  - alias of  tap The following events are controlled by the  anytap  ( Hammer.Pan ) recognizer: 'anytap'  - like  click , but fired twice if double clicking. 'anyclick'  - alias of  anytap Event handling shims EventManager  currently uses Hammer.js for gesture and touch support, but Hammer.js does not support all input event types out of the box. Therefore,  EventManager  employs the following modules to shim the missing functionality: KeyInput Handles keyboard events. MoveInput Handles pointer/touch/mouse move events while no button pressed, and leave events (for when the cursor leaves the DOM element registered with  EventManager ). WheelInput Handles mouse wheel events and trackpad events that emulate mouse wheel events. Note that this module is stateful: it tracks time elapsed between events in order to determine the magnitude/scroll distance of an event. Remarks Current implementation delegates touch and gesture event registration and handling to Hammer.js. Includes shims for handling event not supported by Hammer.js, such as keyboard input, mouse move, and wheel input. This dependency structure may change in the future. Hammer.js unsafely references  window  and  document , and so will fail in environments without these constructs (e.g. Node). To mitigate this, Hammer.js modules are conditionally  require() d, and replaced with mocks in non-browser environments.","headings":[{"value":"EventManager","depth":1},{"value":"Usage","depth":2},{"value":"Methods","depth":2},{"value":"constructor","depth":3},{"value":"destroy","depth":3},{"value":"setElement","depth":3},{"value":"on","depth":3},{"value":"once","depth":3},{"value":"watch","depth":3},{"value":"off","depth":3},{"value":"Supported Events and Gestures","depth":2},{"value":"Basic input events","depth":3},{"value":"Gesture events","depth":3},{"value":"Event handling shims","depth":2},{"value":"KeyInput","depth":3},{"value":"MoveInput","depth":3},{"value":"WheelInput","depth":3},{"value":"Remarks","depth":2}],"slug":"docs/api-reference/event-manager","title":"EventManager"}]}},"staticQueryHashes":["484347790"]}